######################################################
################# Setup Kafka ########################
######################################################
---

# This is here because Kubernetes repeatedly failed to download the image.
# See: https://github.com/kubernetes/kubernetes/issues/59376
# Pulling it through Docker resolves the issue
- name: Perform Kafka/Zookeeper download workaround
  docker_image:
    name: "{{ item }}"
  with_items:
    - "{{ kafka_image }}:{{ kafka_ver }}"
    - "{{ zookeeper_image }}:{{ zookeeper_ver }}"

- name: Set vars for cluster sensor
  set_fact:
    kafka_app_name: "kafka"
    zk_app_name: "zookeeper"
    app_type: cluster
    node_label: sensor
    kafka_replica_count: "{{ groups['sensors'] | length }}"
    zk_replica_count: "{{ zookeeper_replicas }}"
  when: remote == false

- name: Set vars for remote sensor
  set_fact:
    kafka_app_name: "remote-kafka"
    zk_app_name: "remote-zookeeper"
    app_type: remote
    node_label: remote-sensor
    kafka_replica_count: "{{ groups['remote-sensors'] | length }}"
    zk_replica_count: "1"
  when: remote

- name: "Create Directories"
  file:
    path: "{{ item }}"
    state: directory
    owner: root
    group: root
    mode: u+rw,g+rw
  with_items:
    - "{{ zookeeper_dir }}/{{ app_type }}"
    - "{{ kafka_dir }}/{{ app_type }}"
    - "{{ kafka_dir }}/manager"

- name: Install Kafka Templates
  template:
    src: "templates/kafka/{{ item }}.j2"
    dest: "{{ kafka_dir }}/{{ app_type }}/{{ item }}"
    group: root
    owner: root
    mode: 0644
  with_items:
    - deploy.yml
    - svc.yml
    - server.properties

- name: Install Kafka Manager Templates
  template:
    src: "templates/manager/{{ item }}.j2"
    dest: "{{ kafka_dir }}/manager/{{ item }}"
    group: root
    owner: root
    mode: 0644
  with_items:
    - deploy.yml
    - svc.yml
  when: not remote

- name: Copy files
  copy:
    src: "files/{{ item }}"
    dest: "{{ zookeeper_dir }}/{{ app_type }}/{{ item }}"
    group: root
    owner: root
    mode: 0644
  with_items:
    - configuration.xsl
    - log4j.properties

- name: Install Zookeeper Templates
  template:
    src: "templates/zookeeper/{{ item }}.j2"
    dest: "{{ zookeeper_dir }}/{{ app_type }}/{{ item }}"
    group: root
    owner: root
    mode: 0644
  with_items:
    - zoo.cfg
    - deploy.yml
    - svc.yml
    - java.env

- name: Flush Services
  shell: |
    kubectl delete -f {{ item }}/svc.yml --ignore-not-found=true
    while [ $(kubectl get -f {{ item }}/svc.yml | tail -n +2 | wc -l) != '0' ]; do
      echo -n .;
      sleep 1;
    done;
    sleep 5;
  with_items:
    - "{{ kafka_dir }}/{{ app_type }}"
    - "{{ kafka_dir }}/manager"
    - "{{ zookeeper_dir }}/{{ app_type }}"

- name: Flush Deploy
  shell: |
    kubectl delete -f {{ item }}/deploy.yml --ignore-not-found=true
    while [ $(kubectl get -f {{ item }}/deploy.yml | tail -n +2 | wc -l) != '0' ]; do
      echo -n .;
      sleep 1;
    done;
    sleep 5;
  with_items:
    - "{{ kafka_dir }}/{{ app_type }}"
    - "{{ kafka_dir }}/manager"
    - "{{ zookeeper_dir }}/{{ app_type }}"

- name: Flush Config Maps
  command: 'kubectl delete configmap {{ item }} --ignore-not-found=true'
  with_items:
    - "{{ kafka_app_name }}"
    - "{{ zk_app_name }}"

# This task uses kafka_config_map and feeds it into Kubernetes as a configuration map which it then uses
# to build the container

- name: Create ConfigMaps
  command: 'kubectl create configmap {{ kafka_app_name }} --from-file {{ kafka_dir }}/{{ app_type }}/server.properties'

# This does the same, but with Zookeeper
- name: Create Zookeeper Config
  shell: |
    kubectl create configmap {{ zk_app_name }} --from-file={{ zookeeper_dir }}/{{ app_type }}/zoo.cfg \
       --from-file={{ zookeeper_dir }}/{{ app_type }}/configuration.xsl \
       --from-file={{ zookeeper_dir }}/{{ app_type }}/log4j.properties \
       --from-file={{ zookeeper_dir }}/{{ app_type }}/java.env

- name: Create Zookeeper & Kafka Svc
  shell: "kubectl apply -f {{ item }}/svc.yml"
  with_items:
    - "{{ zookeeper_dir }}/{{ app_type }}"
    - "{{ kafka_dir }}/{{ app_type }}"
    - "{{ kafka_dir }}/manager"
  when: not remote

- name: Create Kafka Remote Svc
  shell: "kubectl apply -f {{ kafka_dir }}/{{ app_type }}/svc.yml"
  when: remote

- name: Wait for Services
  pause:
    seconds: 10

- name: Run the zookeeper deploy file
  shell: "kubectl apply -f {{ zookeeper_dir }}/{{ app_type }}/deploy.yml"
  when: not remote

# TODO: Need to fix this task
- name: Wait for zookeeper to be ready
  import_role:
    name: kubernetes/common
    tasks_from: kube_wait
  when: not remote
  vars:
    type: "statefulset"
    namespace: "default"
    resource_name: "{{ zk_app_name }}"
    label: ""

- name: Run the kafka deploy file
  shell: "kubectl apply -f {{ kafka_dir }}/{{ app_type }}/deploy.yml"

- name: Run the kafka manager deploy file
  shell: "kubectl apply -f {{ kafka_dir }}/manager/deploy.yml"
  when: not remote

- name: Wait for kafka to be ready
  import_role:
    name: kubernetes/common
    tasks_from: kube_wait
  when: not remote
  vars:
    type: "statefulset"
    namespace: "default"
    resource_name: "{{ kafka_app_name }}"
    label: ""
