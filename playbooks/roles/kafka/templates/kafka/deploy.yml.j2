{% if remote %}
{% for host in groups['remote-sensors'] %}
{% set kafka_app_name = 'kafka-' + hostvars[host].inventory_hostname_short %}
{% set zk_app_name = 'zookeeper-' + hostvars[host].inventory_hostname_short %}
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ kafka_app_name }}
  labels:
    component: {{ kafka_app_name }}
spec:
  selector:
    matchLabels:
      component: {{ kafka_app_name }}
  podManagementPolicy: "Parallel"
  serviceName: "{{ kafka_app_name }}-broker"
  replicas: 1
  template:
    metadata:
      labels:
        component: {{ kafka_app_name }}
    spec:
      containers:
      - name: {{ kafka_app_name }}
        image: {{ kafka_image }}:{{ kafka_ver }}
        imagePullPolicy: Always
        resources:
          limits:
            cpu: 1000m
          requests:
            cpu: 100m
        ports:
        - containerPort: {{ kafka_port }}
          name: transport
        livenessProbe:
          tcpSocket:
            port: transport
          initialDelaySeconds: 15
          timeoutSeconds: 1
          periodSeconds: 15
          failureThreshold: 5
        volumeMounts:
          - name: kafka-data
            mountPath: "{{ kafka_data_path }}"
          - name: kafka
            mountPath: {{ kafka_home }}/config/server.properties
            subPath: server.properties
        env:
        - name: ZOOKEEPER_REPLICAS
          value: "1"
        - name: ZOOKEEPER_PORT
          value: "{{ zookeeper_port }}"
        - name: KAFKA_PORT
          value: "{{ kafka_port }}"
        - name: INSTANCE_ID
          value: "1"
        - name: KAFKA_LISTENERS
          value: "PLAINTEXT://:9092"
      - name: {{ zk_app_name }}
        image: {{ zookeeper_image }}:{{ zookeeper_ver }}
        imagePullPolicy: Always
        ports:
        - containerPort: {{ zookeeper_port }}
          name: client
        - containerPort: 2888
          name: server
        - containerPort: 3888
          name: leader-election
        #livenessProbe:
        #  tcpSocket:
        #    port: client
        #  initialDelaySeconds: 15
        #  timeoutSeconds: 1
        #  periodSeconds: 15
        #  failureThreshold: 5
        volumeMounts:
        - mountPath: {{ zookeeper_data_path }}
          name: zookeeper-data
        - mountPath: {{ zookeeper_datalog_path }}
          name: zookeeper-datalog
        - name: configs
          mountPath: {{ zookeeper_home }}/conf/
        env:
        - name: INSTANCE_ID
          value: "1"
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: kubernetes.io/hostname
                operator: In
                values:
                - {{ hostvars[host].inventory_hostname }}
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: component
                operator: In
                values:
                - {{ kafka_app_name }}
            topologyKey: "kubernetes.io/hostname"
      volumes:
      - name: kafka
        configMap:
          name: remote-kafka
      - name: kafka-data
        hostPath:
          path: /data/kafka
          type: Directory
      - name: configs
        configMap:
          name: remote-zookeeper
          items:
          - key: zoo.cfg
            path: zoo.cfg
          - key: log4j.properties
            path: log4j.properties
          - key: configuration.xsl
            path: configuration.xsl
      - name: zookeeper-data
        hostPath:
          path: /data/zookeeper/data
          type: Directory
      - name: zookeeper-datalog
        hostPath:
          path: /data/zookeeper/datalog
          type: Directory
{% endfor %}
{% endif %}
{% if not remote %}
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ kafka_app_name }}
  labels:
    component: {{ kafka_app_name }}
spec:
  selector:
    matchLabels:
      component: {{ kafka_app_name }}
  podManagementPolicy: "Parallel"
  serviceName: "{{ kafka_app_name }}-broker"
  replicas: {{ kafka_replica_count }}
  template:
    metadata:
      labels:
        component: {{ kafka_app_name }}
    spec:
      containers:
      - name: {{ kafka_app_name }}
        image: {{ kafka_image }}:{{ kafka_ver }}
        imagePullPolicy: Always
        resources:
          limits:
            cpu: 1000m
          requests:
            cpu: 100m
        ports:
        - containerPort: {{ kafka_port }}
          name: transport
        #livenessProbe:
        #  tcpSocket:
        #    port: transport
        #  initialDelaySeconds: 15
        #  timeoutSeconds: 1
        #  periodSeconds: 15
        #  failureThreshold: 5
        volumeMounts:
          - name: kafka-data
            mountPath: "{{ kafka_data_path }}"
          - name: kafka
            mountPath: {{ kafka_home }}/config/server.properties
            subPath: server.properties
        env:
        - name: ZOOKEEPER_REPLICAS
          value: "{{ zookeeper_replicas }}"
        - name: ZOOKEEPER_PORT
          value: "{{ zookeeper_port }}"
        - name: KAFKA_PORT
          value: "{{ kafka_port }}"
        - name: KAFKA_LISTENERS
          value: "PLAINTEXT://:9092"
        - name: JMX_PORT
          value: "{{ kafka_jmx_port }}"
        - name: KAFKA_HEAP_OPTS
          value: "-Xmx{{ kafka_mem }}g -Xms{{ kafka_mem }}g"
# TODO
# https://docs.hortonworks.com/HDPDocuments/HDP2/HDP-2.6.2/bk_kafka-component-guide/content/prepare-kafka-env.html
# We need to set the following Java options
#-Xmx6g
#-Xms6g
#-XX:MetaspaceSize=96m
#-XX:+UseG1GC
#-XX:MaxGCPauseMillis=20
#-XX:InitiatingHeapOccupancyPercent=35
#-XX:G1HeapRegionSize=16M
#-XX:MinMetaspaceFreeRatio=50
#-XX:MaxMetaspaceFreeRatio=80
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: component
                operator: In
                values:
                - {{ kafka_app_name }}
            topologyKey: "kubernetes.io/hostname"
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: kafka
                operator: In
                values:
                - "true"
              - key: role
                operator: In
                values:
                - "{{ node_label }}"
      volumes:
      - name: kafka
        configMap:
          name: {{ kafka_app_name }}
  volumeClaimTemplates:
  - metadata:
      name: kafka-data
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: rbd
      resources:
        requests:
          storage: {{ kafka_pv_size }}Gi
{% endif %}
