# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# see kafka.server.KafkaConfig for additional details and defaults

############################# Server Basics #############################

# The id of the broker. This must be set to a unique integer for each broker.
# This will be overridden at start up based on the pod number,
# for example kafka-0 would get broker.id 0 kafka-1 broker.id 1
broker.id={% if remote %}0{% else %}255{% endif %}

# See: https://docs.hortonworks.com/HDPDocuments/HDP2/HDP-2.6.2/bk_kafka-component-guide/content/prepare-kafka-env.html
# for reasoning
num.io.threads={{ num_of_pvcs+1 }}

############################# Socket Server Settings #############################

# The address the socket server listens on. It will get the value returned from
# java.net.InetAddress.getCanonicalHostName() if not configured.
#   FORMAT:
#     listeners = listener_name://host_name:port
#   EXAMPLE:
#     listeners = PLAINTEXT://your.host.name:9092
# listeners: PLAINTEXT://kafka.default.svc.cluster.local:{{ kafka_port }}
listeners=PLAINTEXT://:{{ kafka_port }}

# Hostname and port the broker will advertise to producers and consumers. If not set,
# it uses the value for "listeners" if configured.  Otherwise, it will use the value
# returned from java.net.InetAddress.getCanonicalHostName().
advertised.listeners=PLAINTEXT://:{{ kafka_port }}


############################# Log Basics #############################

# A comma seperated list of directories under which to store log files
log.dirs={{ kafka_data_path }}/logs
log.retention.bytes={{ ((kafka_pv_size*1073741824)/3) | int }}
log.retention.hours=0
log.retention.minutes=5

############################# Zookeeper #############################

# Zookeeper connection string (see zookeeper docs for details).
# This is a comma separated host:port pairs, each corresponding to a zk
# server. e.g. "127.0.0.1:3000,127.0.0.1:3001,127.0.0.1:3002".
# You can also append an optional chroot string to the urls to specify the
# root directory for all kafka znodes.
{% if remote %}
zookeeper.connect=localhost:{{ zookeeper_port }}
{% else %}
zookeeper.connect={% for i in range(zookeeper_replicas) %}zookeeper-{{ i }}.zookeeper.default.svc.cluster.local:{{ zookeeper_port }},{% endfor %}
{% endif %}

############################## Others ##############################
offsets.topic.replication.factor=1
# KAFKA_USER: "kafka"
# KAFKA_DATADIR: "/var/lib/kafka/"
# KAFKA_LOG4J_LOGDIR: "/var/log/kafka/"
# KAFKA_LOG4J_LEVEL: "INFO"
{% if remote %}
num.partitions=1
{% else %}
num.partitions={{ (groups['sensors'] | length) * 2 }}
{% endif %}
# default.replication.factor=2
zookeeper.connection.timeout.ms=36000